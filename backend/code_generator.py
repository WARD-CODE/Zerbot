import os
import google.generativeai as genai
import logging
import re

logger = logging.getLogger(__name__)

class CodeGenerator:
    def __init__(self):
        # Configure Gemini API
        api_key = os.getenv("GEMINI_API_KEY")
        if not api_key:
            raise ValueError("GEMINI_API_KEY environment variable is required")
        
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel('gemini-pro')
        
        self.code_generation_prompt = """
        You are a Python code generator. Generate clean, executable Python code based on the user's description.
        
        Requirements:
        1. The code should be complete and runnable
        2. Include proper error handling
        3. Add comments for clarity
        4. The program should have a clear output that shows in the console
        5. Add input() at the end to keep the console window open
        6. Make the program user-friendly with clear instructions
        
        Generate ONLY the Python code, no explanations or markdown formatting.
        The code should be ready to run as-is.
        
        User request: {description}
        
        Python code:
        """
    
    async def generate_code(self, description: str) -> str:
        try:
            prompt = self.code_generation_prompt.format(description=description)
            
            response = self.model.generate_content(prompt)
            code = response.text
            
            # Clean up the code (remove markdown formatting if present)
            code = self._clean_code(code)
            
            # Ensure the code keeps console open
            if "input(" not in code:
                code += "\n\n# Keep console window open\ninput(\"Press Enter to exit...\")"
            
            return code
            
        except Exception as e:
            logger.error(f"Error generating code: {str(e)}")
            # Return a simple default program
            return self._get_default_program(description)
    
    def _clean_code(self, code: str) -> str:
        """Remove markdown formatting and clean up code"""
        # Remove markdown code blocks
        code = re.sub(r'```python\n?', '', code)
        code = re.sub(r'```\n?', '', code)
        
        # Remove any leading/trailing whitespace
        code = code.strip()
        
        return code
    
    def _get_default_program(self, description: str) -> str:
        """Return a default program when code generation fails"""
        return f'''
# Generated Program: {description}
print("=" * 50)
print("ZERBOT GENERATED PROGRAM")
print("=" * 50)
print()
print("Program Description: {description}")
print()
print("This is a simple program generated by Zerbot AI.")
print("The actual implementation would depend on more specific requirements.")
print()
print("=" * 50)

# Keep console window open
input("Press Enter to exit...")
'''