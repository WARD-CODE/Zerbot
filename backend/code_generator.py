import os
from typing import List, Dict, Any
import google.generativeai as genai
import logging

logger = logging.getLogger(__name__)

class CodeGenerator:
    def __init__(self):
        # Configure Gemini API
        api_key = os.getenv("GEMINI_API_KEY")
        if not api_key:
            raise ValueError("GEMINI_API_KEY environment variable is required")
        
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel('gemini-pro')
        
        # System prompt for code generation
        self.system_prompt = """
        You are a Python code generator. Generate clean, working Python code based on user descriptions.
        The code should be self-contained and executable. Follow these guidelines:

        1. Include all necessary imports at the top
        2. Use proper error handling where appropriate
        3. Add helpful comments to explain the code
        4. Make the code user-friendly with clear output messages
        5. If the program needs user input, use input() function
        6. Always add a pause at the end so users can see the output: input("Press Enter to exit...")
        7. Keep the code simple and focused on the main functionality requested
        8. If creating a GUI, use tkinter (built into Python)
        9. For complex calculations, show step-by-step results
        10. Include example usage or test cases when appropriate

        Generate ONLY the Python code, no explanations or markdown formatting.
        The code should run immediately when executed.
        """
    
    async def generate_code(self, description: str) -> str:
        try:
            # Build the prompt
            full_prompt = f"{self.system_prompt}\n\nUser Request: {description}\n\nPython Code:"
            
            # Generate code using Gemini
            response = self.model.generate_content(full_prompt)
            
            # Clean up the response - remove any markdown formatting
            code = response.text.strip()
            
            # Remove markdown code blocks if present
            if code.startswith('```python'):
                code = code[9:]
            elif code.startswith('```'):
                code = code[3:]
            
            if code.endswith('```'):
                code = code[:-3]
            
            code = code.strip()
            
            # Ensure the code has a pause at the end for user experience
            if 'input(' not in code or not code.endswith('input("Press Enter to exit...")'):
                code += '\n\ninput("Press Enter to exit...")'
            
            return code
            
        except Exception as e:
            logger.error(f"Error generating code: {str(e)}")
            # Return a simple fallback program
            return '''print("Hello! This is a sample program generated by Zerbot.")
print("Something went wrong with code generation, but here's a working example!")
print("You can modify this code or try a different request.")

# Simple calculator example
try:
    num1 = float(input("Enter first number: "))
    num2 = float(input("Enter second number: "))
    operation = input("Enter operation (+, -, *, /): ")
    
    if operation == '+':
        result = num1 + num2
    elif operation == '-':
        result = num1 - num2
    elif operation == '*':
        result = num1 * num2
    elif operation == '/':
        if num2 != 0:
            result = num1 / num2
        else:
            result = "Error: Division by zero"
    else:
        result = "Error: Invalid operation"
    
    print(f"Result: {result}")
except ValueError:
    print("Error: Please enter valid numbers")

input("Press Enter to exit...")'''